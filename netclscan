#!/usr/bin/env tclsh

#-------------------------------------------------------------------------------------
# author: NidoBr
# e-mail: < coqecoisa@gmail.com >
# github: < https://github.com/NIDObr >
# Version: 0.1.2 BETA 
# info:
#	Simple tool to display active network connections on IPV4 and IPV6 protocols 
#	Uses as base the files of the directory "/proc/net/*" 
#-------------------------------------------------------------------------------------

#--------------------------------------MODULES

# depends on the libtcl package 
#package require dns

#-------------------------------------FUNCTIONS

# convert hexadecimal (little-endian) to decimal
proc hex_to_dec { hex_string } {
	# converts hexadecimal to decimal using "expr 0x" 
	set dec1 [ expr 0x[ string range $hex_string 6 7 ] ]
	set dec2 [ expr 0x[ string range $hex_string 4 5 ] ]
	set dec3 [ expr 0x[ string range $hex_string 2 3 ] ]
	set dec4 [ expr 0x[ string range $hex_string 0 1 ] ]
	set dec_ip "$dec1.$dec2.$dec3.$dec4"
	# IP
	return $dec_ip
}
proc file_analyze { net_file } {
	gets $net_file
	while { ! [ eof "$net_file" ] } {
		set linha [ gets $net_file ]
		if { $linha == "" } {
			break
		} elseif { [ lindex $linha 0 ] == "sl" } {
			set linha [ gets $net_file ]
			set ::flag_proto "udp"
		}
		# IP:PORTA DE ORIGEM
		set hex_orig [ lindex $linha 1 ]
		set ip_local [ hex_to_dec [ string range $hex_orig 0 7 ] ]
		set porta_local [ expr 0x[ string range $hex_orig 9 12 ] ]
		# IP:PORTA DE DESTINO
		set hex_dest [ lindex $linha 2 ]
		set ip_dest [ hex_to_dec [ string range $hex_dest 0 7 ] ]
		set porta_dest  [ expr 0x[ string range $hex_dest 9 12 ] ]
		set estado [ lindex $linha 3 ]
		display_info $ip_local $porta_local $ip_dest $porta_dest $estado
	}
}
proc display_info { ip_l porta_l ip_d porta_d estado } {
	if { $::init == 0 } {
		puts "netclscan $::versao		$::time_data\n\nProto	Estado		IP local		ip remoto\n"
		set ::init 1
	}
	set stat "desconhecido"
	switch $estado {
		0A { set stat "escuta      " }
		01 { set stat "estabelecido" }
		06 { set stat "espera      " }
	}
	# TEMPORARY SOLUTION!
	if { $::flag_dns == "on" } {
		set name_l ""
		set name_d ""
		catch {
			set name_l [ string trimright [ lindex [ exec /usr/bin/env host $ip_l ] 4 ] '.' ]
		} errl
		catch {
			set name_d [ string trimright [ lindex [ exec /usr/bin/env host $ip_d ] 4 ] '.' ]
		} errd
		if { $name_l != "" } {
			set ip_l $name_l
		}
		if { $name_d != "" } {
			set ip_d $name_d
		}
	}

	if { [ string first ":" "$ip_l:$porta_l" ] < 11 } {
		set tabl "	"
	} else {
		set tabl ""
	}

	puts "$::flag_proto	${stat}	${ip_l}:${porta_l}${tabl}	${ip_d}:${porta_d}"

}

#-------------------------------------MAIN

global flag_proto
set ::init 0
set ::cont_local 0
set ::flag_dns "off"
set ::skip 0
set ::time_data [ clock format [ clock seconds ] -format {%d/%m/%y %H:%M} ]
set ::versao "0.1.1-BETA"

if { $argv == "" } {
	puts "netclscan: Mostra as conexões de rede\n\n	netclscan \[opções\]\n	\nOpções:\n	-u Lista as conexões UDP\n	-t Lista as conexões TCP\n	-a Lista as conexoẽs UDP e TCP\n	-d Ativa a resolucão de nomes"
	exit
} else {
	set _arg $argv
}
foreach arg_dns $_arg {
	switch -regexp -matchvar ds $arg_dns {
		{\-d\y} {
			set _arg [ regsub {[\s]?\-d[\s]?} $_arg "" ]
			set ::flag_dns "on"
		}
		{\-([aut]?)d([aut]?)\y} {
			set _arg [ regsub d $_arg "" ]
			set ::flag_dns "on"
		}
	}
}

switch $_arg {
	-t {
		set ::flag_proto "tcp"
		set net_file [ open /proc/net/tcp r ]
		file_analyze $net_file
	}
	-u {
		set ::flag_proto "udp"
		set net_file [ open /proc/net/udp r ]
		file_analyze $net_file
	}
	-a {
		set ::flag_proto "tcp"
		set tmp_time [ clock format [ clock seconds ] -format {%d%m%y_%H%M%S} ]
		set tcp_file [ open /proc/net/tcp r ]
		set udp_file [ open /proc/net/udp r ]
		file delete -force /tmp/netclscan_*
		set tmp_file [ open /tmp/netclscan_$tmp_time a+ ]
		while { ! [ eof $tcp_file ] } {
			set linha [ gets $tcp_file ]
			if { $linha == "" } {
				break
			}
			puts $tmp_file $linha
		}
		puts $tmp_file [ read $udp_file ]
		close $tcp_file
		close $udp_file
		close $tmp_file
		set net_file [ open /tmp/netclscan_$tmp_time r ]
		file_analyze $net_file
		file delete -force /tmp/netclscan_$tmp_time
	}
	default {
		puts "ERRO! < $argv > not parameter"
		exit 1
	}
}

close $net_file
